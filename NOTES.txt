--------------- POSSIBLE REVIEW QUESTIONS ------------------

Keep in mind that this is not an all-inclusive list but should at least help you prepare. 

	1. Generators in Ruby on Rails are a great way to quickly create folders and files. Could you name a few? What are the specific differences between them?
      
    2. What determines the keys in a params hash? 
       
	3. What are strong params and why do we use them?

	
	4. How do you make a custom route? 
        
	5. What are all the routes we get when we type in `resources :users`?

	
	6. How can you check the list of all the routes you created?
   
	
	7. How do you set up nested routes? Why would you use a nested route?
	
	8. What are some of the methods that we get from the belongs_to macro?  For example, if we say `belongs_to :user`, what methods do we now have access to?
	
	9. What does the .build method do and can you give an example of when to use it?
	
	10. How do you set up a many-to-many relationship?
	
	11. How can you tell if a table is a join table?
	
	12. If you wanted to add an additional attribute to a model, how would you do that?
	
	13. What’s the difference between `.new` and `.create`?
	
	14. What type of model validations do you know?
	
	15. How do model validations work in general?
	
	16. How can you find out what validations failed and why?
	
	17. Which methods will trigger model validations to run? Could you name a few methods that won’t?
	
	18. What’s the difference between find and find_by?
	
	19. How do you rescue exceptions in Rails?
	
	20. What methods and validations do we get from has_secure_password?
	
	21. Why do we use .authenticate? What does it do?
	
	22. How do you implement authentication in Rails?
	
	23. What are sessions?
	
	24. What are cookies?
	
	25. What is the difference between a POST request and a GET request?
	
	26. What are all the steps you need to take if you want to add in a new route? 
	
	27. When should you use helpers?
	
	28. When should you use scope methods? 
	
	29. How do you write a scope method?
	
	30. What does it mean when you get this error message: undefined method ‘user’ for NilClass?
	
    31. What do we mean by serialization and how can you serialize data in Rails?

    --EXTRA QUESTIONS--

    32. What is Active Record?
        - It is a buit in ORM (object relational mapper). ORM is a module that enables your application to manage data in a method-driven-structure (via queries, adding records, and any database processes instead of writing SQL manually.)
        
                        SQL:
                        SELECT * FROM cheeses

                        ACTIVE RECORD:
                        Cheese.all

    33. A model file is a RUBY CLASS. WHy?
        - it inherits from ActiveRecord::Base class, which mens it has access to a number of methods that assist in working with the database. You can treat it like a regular Ruby class: create methods, data attributes, and evertyhing you can do in a class file.

    34. A model file contain code such as but not limited to the following:

        -Custom scopesLinks to an external site.
        -Model instance methods
        -Default settings for database columns
        -ValidationsLinks to an external site.
        -Model-to-model relationshipsLinks to an external site.
        -CallbacksLinks to an external site.
        -Custom algorithms

    35. How are models connected to the database via Active Record?
        - Active Record is an ORM that maps database tables to Ruby classes and provides methods for querying and manipulating data in the database.
        - a model interacts with the database table via Active Record.


--------------------- PROJECT QUESTIONS ---------------------

1a. In some of my components, for example, the Activity component, What is the point of having a useEffect hook to run checkLogin() function?
    Answer: (its not needed in the src components. only in the authcontext file)
        The useEffect hook with checkLogin function as its callback is used to check if the user is logged in or not, and update the isLoggedIn state accordingly. It is executed once, after the component is mounted, due to an empty dependency array as a second argument.

        The checkLogin function sends a request to the /me endpoint to check if the user is authenticated or not. If the response includes an errors property, then the user is not authenticated, and setIsLoggedIn(false) is called. Otherwise, the setUser function updates the user state with the user object returned by the server, and setIsLoggedIn(true) is called.

        By updating the isLoggedIn state, the component re-renders and displays either the activities or the login/signup message, depending on the user's authentication status.

        Overall, this hook is used to synchronize the isLoggedIn state with the user's authentication status.

1b. Will my code work without it?
    Answer:
        It depends on the purpose of the checkLogin function. If the purpose of checkLogin is to verify if the user is authenticated, then removing the useEffect that calls the function would cause the authentication to not happen, and the user would not be able to access the component.

        However, if the purpose of checkLogin is to retrieve user information from the server, it may be possible to remove the useEffect call without any issues, as long as the data is still being retrieved from the server somewhere else in the code.

        In general, useEffect is used to perform some side effects, like fetching data from an external API, subscribing to a WebSocket connection, or updating the document title. In this specific case, useEffect is used to call checkLogin when the component mounts. This ensures that the user's authentication status is checked and updated whenever the component is rendered.


2. Do I need to have the useEffect to called checkLogin() in my AuthContext.js file?
    Answer:
        The useEffect hook you have provided checks whether the user is logged in or not by calling the checkLogin() function, which sends a request to the server to get the user data and then sets the state of isLoggedIn and user accordingly.

        If you remove the useEffect hook, the checkLogin() function will not be called automatically when the component mounts, which means that the initial state of isLoggedIn and user will not be set. You will have to call the checkLogin() function explicitly in your component to set the state of isLoggedIn and user based on the response from the server.

        Therefore, it depends on your use case whether you need the useEffect hook or not. If you want to check the user's login status automatically when the component mounts, then you need the useEffect hook. If you want to check the login status at a later point in time, you can remove the useEffect hook and call the checkLogin() function when you need to.

3. useLocation hook -> Why did I use this in my AuthContext File?
    https://reactrouter.com/en/main/hooks/use-location
    
    const location = useLocation()

     useEffect(() => {
      setErrors([])
    }, [location.pathname]) // this will clear the errors array whenever the user navigates to a new page

    This hook returns the current location object. This can be useful if you'd like to perform some side effect whenever the current location changes.
